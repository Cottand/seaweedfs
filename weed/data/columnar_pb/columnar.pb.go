// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.11
// source: columnar.proto

package columnar_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogicalType int32

const (
	LogicalType_Uint8   LogicalType = 0
	LogicalType_Uint16  LogicalType = 1
	LogicalType_Float32 LogicalType = 4
)

// Enum value maps for LogicalType.
var (
	LogicalType_name = map[int32]string{
		0: "Uint8",
		1: "Uint16",
		4: "Float32",
	}
	LogicalType_value = map[string]int32{
		"Uint8":   0,
		"Uint16":  1,
		"Float32": 4,
	}
)

func (x LogicalType) Enum() *LogicalType {
	p := new(LogicalType)
	*p = x
	return p
}

func (x LogicalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalType) Descriptor() protoreflect.EnumDescriptor {
	return file_columnar_proto_enumTypes[0].Descriptor()
}

func (LogicalType) Type() protoreflect.EnumType {
	return &file_columnar_proto_enumTypes[0]
}

func (x LogicalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogicalType.Descriptor instead.
func (LogicalType) EnumDescriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{0}
}

type Field_Type int32

const (
	Field_PARENT   Field_Type = 0
	Field_REPEATED Field_Type = 1
	Field_LEAF     Field_Type = 2
)

// Enum value maps for Field_Type.
var (
	Field_Type_name = map[int32]string{
		0: "PARENT",
		1: "REPEATED",
		2: "LEAF",
	}
	Field_Type_value = map[string]int32{
		"PARENT":   0,
		"REPEATED": 1,
		"LEAF":     2,
	}
)

func (x Field_Type) Enum() *Field_Type {
	p := new(Field_Type)
	*p = x
	return p
}

func (x Field_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_columnar_proto_enumTypes[1].Descriptor()
}

func (Field_Type) Type() protoreflect.EnumType {
	return &file_columnar_proto_enumTypes[1]
}

func (x Field_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Field_Type.Descriptor instead.
func (Field_Type) EnumDescriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{8, 0}
}

type FileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	FileKey  uint64 `protobuf:"varint,2,opt,name=file_key,json=fileKey,proto3" json:"file_key,omitempty"`
	Cookie   uint32 `protobuf:"fixed32,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *FileId) Reset() {
	*x = FileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileId) ProtoMessage() {}

func (x *FileId) ProtoReflect() protoreflect.Message {
	mi := &file_columnar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileId.ProtoReflect.Descriptor instead.
func (*FileId) Descriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{0}
}

func (x *FileId) GetVolumeId() uint32 {
	if x != nil {
		return x.VolumeId
	}
	return 0
}

func (x *FileId) GetFileKey() uint64 {
	if x != nil {
		return x.FileKey
	}
	return 0
}

func (x *FileId) GetCookie() uint32 {
	if x != nil {
		return x.Cookie
	}
	return 0
}

type ColumnUint16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base uint32 `protobuf:"varint,1,opt,name=base,proto3" json:"base,omitempty"`
	Min  uint32 `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`
	Max  uint32 `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ColumnUint16) Reset() {
	*x = ColumnUint16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnUint16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnUint16) ProtoMessage() {}

func (x *ColumnUint16) ProtoReflect() protoreflect.Message {
	mi := &file_columnar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnUint16.ProtoReflect.Descriptor instead.
func (*ColumnUint16) Descriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{1}
}

func (x *ColumnUint16) GetBase() uint32 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *ColumnUint16) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ColumnUint16) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type ColumnUint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base uint32 `protobuf:"varint,1,opt,name=base,proto3" json:"base,omitempty"`
	Min  uint32 `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`
	Max  uint32 `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ColumnUint32) Reset() {
	*x = ColumnUint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnUint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnUint32) ProtoMessage() {}

func (x *ColumnUint32) ProtoReflect() protoreflect.Message {
	mi := &file_columnar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnUint32.ProtoReflect.Descriptor instead.
func (*ColumnUint32) Descriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{2}
}

func (x *ColumnUint32) GetBase() uint32 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *ColumnUint32) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ColumnUint32) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type ColumnFloat32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min uint32 `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`
	Max uint32 `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ColumnFloat32) Reset() {
	*x = ColumnFloat32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnFloat32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnFloat32) ProtoMessage() {}

func (x *ColumnFloat32) ProtoReflect() protoreflect.Message {
	mi := &file_columnar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnFloat32.ProtoReflect.Descriptor instead.
func (*ColumnFloat32) Descriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{3}
}

func (x *ColumnFloat32) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ColumnFloat32) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type ColumnSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the fields/columns in this file
	FieldId   int32   `protobuf:"varint,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	FileId    *FileId `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	RowOffset int64   `protobuf:"varint,3,opt,name=row_offset,json=rowOffset,proto3" json:"row_offset,omitempty"`
	RowCount  int32   `protobuf:"varint,4,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// Types that are assignable to StorageType:
	//
	//	*ColumnSplit_MetaUint16
	//	*ColumnSplit_MetaUint32
	//	*ColumnSplit_MetaFloat32
	StorageType isColumnSplit_StorageType `protobuf_oneof:"storage_type"`
}

func (x *ColumnSplit) Reset() {
	*x = ColumnSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnSplit) ProtoMessage() {}

func (x *ColumnSplit) ProtoReflect() protoreflect.Message {
	mi := &file_columnar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnSplit.ProtoReflect.Descriptor instead.
func (*ColumnSplit) Descriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{4}
}

func (x *ColumnSplit) GetFieldId() int32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *ColumnSplit) GetFileId() *FileId {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *ColumnSplit) GetRowOffset() int64 {
	if x != nil {
		return x.RowOffset
	}
	return 0
}

func (x *ColumnSplit) GetRowCount() int32 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (m *ColumnSplit) GetStorageType() isColumnSplit_StorageType {
	if m != nil {
		return m.StorageType
	}
	return nil
}

func (x *ColumnSplit) GetMetaUint16() *ColumnUint16 {
	if x, ok := x.GetStorageType().(*ColumnSplit_MetaUint16); ok {
		return x.MetaUint16
	}
	return nil
}

func (x *ColumnSplit) GetMetaUint32() *ColumnUint32 {
	if x, ok := x.GetStorageType().(*ColumnSplit_MetaUint32); ok {
		return x.MetaUint32
	}
	return nil
}

func (x *ColumnSplit) GetMetaFloat32() *ColumnFloat32 {
	if x, ok := x.GetStorageType().(*ColumnSplit_MetaFloat32); ok {
		return x.MetaFloat32
	}
	return nil
}

type isColumnSplit_StorageType interface {
	isColumnSplit_StorageType()
}

type ColumnSplit_MetaUint16 struct {
	MetaUint16 *ColumnUint16 `protobuf:"bytes,8,opt,name=meta_uint16,json=metaUint16,proto3,oneof"`
}

type ColumnSplit_MetaUint32 struct {
	MetaUint32 *ColumnUint32 `protobuf:"bytes,9,opt,name=meta_uint32,json=metaUint32,proto3,oneof"`
}

type ColumnSplit_MetaFloat32 struct {
	MetaFloat32 *ColumnFloat32 `protobuf:"bytes,10,opt,name=meta_float32,json=metaFloat32,proto3,oneof"`
}

func (*ColumnSplit_MetaUint16) isColumnSplit_StorageType() {}

func (*ColumnSplit_MetaUint32) isColumnSplit_StorageType() {}

func (*ColumnSplit_MetaFloat32) isColumnSplit_StorageType() {}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All fields of the dataset, including the nested fields.
	Fields    []*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	DataFiles []string `protobuf:"bytes,2,rep,name=data_files,json=dataFiles,proto3" json:"data_files,omitempty"`
	// Snapshot version number.
	Version uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_columnar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{5}
}

func (x *Snapshot) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Snapshot) GetDataFiles() []string {
	if x != nil {
		return x.DataFiles
	}
	return nil
}

func (x *Snapshot) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DataFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldIds  []int32     `protobuf:"varint,1,rep,packed,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`
	RowGroups []*RowGroup `protobuf:"bytes,2,rep,name=row_groups,json=rowGroups,proto3" json:"row_groups,omitempty"`
}

func (x *DataFile) Reset() {
	*x = DataFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFile) ProtoMessage() {}

func (x *DataFile) ProtoReflect() protoreflect.Message {
	mi := &file_columnar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFile.ProtoReflect.Descriptor instead.
func (*DataFile) Descriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{6}
}

func (x *DataFile) GetFieldIds() []int32 {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

func (x *DataFile) GetRowGroups() []*RowGroup {
	if x != nil {
		return x.RowGroups
	}
	return nil
}

type RowGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowOffset    int64          `protobuf:"varint,1,opt,name=row_offset,json=rowOffset,proto3" json:"row_offset,omitempty"`
	RowCount     int32          `protobuf:"varint,2,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	ColumnSplits []*ColumnSplit `protobuf:"bytes,3,rep,name=column_splits,json=columnSplits,proto3" json:"column_splits,omitempty"`
}

func (x *RowGroup) Reset() {
	*x = RowGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnar_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowGroup) ProtoMessage() {}

func (x *RowGroup) ProtoReflect() protoreflect.Message {
	mi := &file_columnar_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowGroup.ProtoReflect.Descriptor instead.
func (*RowGroup) Descriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{7}
}

func (x *RowGroup) GetRowOffset() int64 {
	if x != nil {
		return x.RowOffset
	}
	return 0
}

func (x *RowGroup) GetRowCount() int32 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *RowGroup) GetColumnSplits() []*ColumnSplit {
	if x != nil {
		return x.ColumnSplits
	}
	return nil
}

// Field metadata for a column.
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Field_Type `protobuf:"varint,1,opt,name=type,proto3,enum=columnar_pb.Field_Type" json:"type,omitempty"`
	// Fully qualified name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// / Field Id.
	Id int32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	// / Parent Field ID. If not set, this is a top-level column.
	ParentId int32 `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Logical types, support parameterized Arrow Type.
	LogicalType LogicalType `protobuf:"varint,5,opt,name=logical_type,json=logicalType,proto3,enum=columnar_pb.LogicalType" json:"logical_type,omitempty"`
	// If this field is nullable.
	Nullable bool `protobuf:"varint,6,opt,name=nullable,proto3" json:"nullable,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnar_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_columnar_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{8}
}

func (x *Field) GetType() Field_Type {
	if x != nil {
		return x.Type
	}
	return Field_PARENT
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Field) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Field) GetLogicalType() LogicalType {
	if x != nil {
		return x.LogicalType
	}
	return LogicalType_Uint8
}

func (x *Field) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

type AnyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*AnyValue_BytesValue
	//	*AnyValue_BoolValue
	//	*AnyValue_Int64Value
	//	*AnyValue_Int32Value
	//	*AnyValue_DoubleValue
	Value isAnyValue_Value `protobuf_oneof:"value"`
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnar_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_columnar_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyValue.ProtoReflect.Descriptor instead.
func (*AnyValue) Descriptor() ([]byte, []int) {
	return file_columnar_proto_rawDescGZIP(), []int{9}
}

func (m *AnyValue) GetValue() isAnyValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AnyValue) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*AnyValue_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *AnyValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*AnyValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *AnyValue) GetInt64Value() uint64 {
	if x, ok := x.GetValue().(*AnyValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *AnyValue) GetInt32Value() uint32 {
	if x, ok := x.GetValue().(*AnyValue_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *AnyValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*AnyValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

type isAnyValue_Value interface {
	isAnyValue_Value()
}

type AnyValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,1,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type AnyValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type AnyValue_Int64Value struct {
	Int64Value uint64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type AnyValue_Int32Value struct {
	Int32Value uint32 `protobuf:"varint,4,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type AnyValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

func (*AnyValue_BytesValue) isAnyValue_Value() {}

func (*AnyValue_BoolValue) isAnyValue_Value() {}

func (*AnyValue_Int64Value) isAnyValue_Value() {}

func (*AnyValue_Int32Value) isAnyValue_Value() {}

func (*AnyValue_DoubleValue) isAnyValue_Value() {}

var File_columnar_proto protoreflect.FileDescriptor

var file_columnar_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61, 0x72, 0x5f, 0x70, 0x62, 0x22, 0x58, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x46, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22,
	0x46, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x33, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xdf, 0x02, 0x0a,
	0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x61, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61,
	0x72, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x31,
	0x36, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12,
	0x3c, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61, 0x72, 0x5f,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x3f, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61, 0x72, 0x5f, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x42, 0x0e,
	0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6f,
	0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x61, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x5d, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x77, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x08, 0x52, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x72, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61, 0x72, 0x5f,
	0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x41,
	0x46, 0x10, 0x02, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x31, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x74, 0x38,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x10, 0x04, 0x42, 0x36, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x61, 0x77, 0x65, 0x65,
	0x64, 0x66, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x77, 0x65, 0x65, 0x64, 0x66, 0x73, 0x2f, 0x77, 0x65,
	0x65, 0x64, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61, 0x72,
	0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_columnar_proto_rawDescOnce sync.Once
	file_columnar_proto_rawDescData = file_columnar_proto_rawDesc
)

func file_columnar_proto_rawDescGZIP() []byte {
	file_columnar_proto_rawDescOnce.Do(func() {
		file_columnar_proto_rawDescData = protoimpl.X.CompressGZIP(file_columnar_proto_rawDescData)
	})
	return file_columnar_proto_rawDescData
}

var file_columnar_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_columnar_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_columnar_proto_goTypes = []interface{}{
	(LogicalType)(0),      // 0: columnar_pb.LogicalType
	(Field_Type)(0),       // 1: columnar_pb.Field.Type
	(*FileId)(nil),        // 2: columnar_pb.FileId
	(*ColumnUint16)(nil),  // 3: columnar_pb.ColumnUint16
	(*ColumnUint32)(nil),  // 4: columnar_pb.ColumnUint32
	(*ColumnFloat32)(nil), // 5: columnar_pb.ColumnFloat32
	(*ColumnSplit)(nil),   // 6: columnar_pb.ColumnSplit
	(*Snapshot)(nil),      // 7: columnar_pb.Snapshot
	(*DataFile)(nil),      // 8: columnar_pb.DataFile
	(*RowGroup)(nil),      // 9: columnar_pb.RowGroup
	(*Field)(nil),         // 10: columnar_pb.Field
	(*AnyValue)(nil),      // 11: columnar_pb.AnyValue
}
var file_columnar_proto_depIdxs = []int32{
	2,  // 0: columnar_pb.ColumnSplit.file_id:type_name -> columnar_pb.FileId
	3,  // 1: columnar_pb.ColumnSplit.meta_uint16:type_name -> columnar_pb.ColumnUint16
	4,  // 2: columnar_pb.ColumnSplit.meta_uint32:type_name -> columnar_pb.ColumnUint32
	5,  // 3: columnar_pb.ColumnSplit.meta_float32:type_name -> columnar_pb.ColumnFloat32
	10, // 4: columnar_pb.Snapshot.fields:type_name -> columnar_pb.Field
	9,  // 5: columnar_pb.DataFile.row_groups:type_name -> columnar_pb.RowGroup
	6,  // 6: columnar_pb.RowGroup.column_splits:type_name -> columnar_pb.ColumnSplit
	1,  // 7: columnar_pb.Field.type:type_name -> columnar_pb.Field.Type
	0,  // 8: columnar_pb.Field.logical_type:type_name -> columnar_pb.LogicalType
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_columnar_proto_init() }
func file_columnar_proto_init() {
	if File_columnar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_columnar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnUint16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnUint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnFloat32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnar_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnar_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnar_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnar_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnar_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_columnar_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ColumnSplit_MetaUint16)(nil),
		(*ColumnSplit_MetaUint32)(nil),
		(*ColumnSplit_MetaFloat32)(nil),
	}
	file_columnar_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*AnyValue_BytesValue)(nil),
		(*AnyValue_BoolValue)(nil),
		(*AnyValue_Int64Value)(nil),
		(*AnyValue_Int32Value)(nil),
		(*AnyValue_DoubleValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_columnar_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_columnar_proto_goTypes,
		DependencyIndexes: file_columnar_proto_depIdxs,
		EnumInfos:         file_columnar_proto_enumTypes,
		MessageInfos:      file_columnar_proto_msgTypes,
	}.Build()
	File_columnar_proto = out.File
	file_columnar_proto_rawDesc = nil
	file_columnar_proto_goTypes = nil
	file_columnar_proto_depIdxs = nil
}
